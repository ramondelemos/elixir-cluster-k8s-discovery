use Mix.Config

# For production, we often load configuration from external
# sources, such as your system environment. For this reason,
# you won't find the :http configuration below, but set inside
# MyappWeb.Endpoint.init/2 when load_from_system_env is
# true. Any dynamic configuration should be done there.
#
# Don't forget to configure the url host to something meaningful,
# Phoenix uses this information when generating URLs.
#
# Finally, we also include the path to a cache manifest
# containing the digested version of static files. This
# manifest is generated by the mix phx.digest task
# which you typically run after static files are built.
config :myapp, MyappWeb.Endpoint,
  load_from_system_env: true,
  http: [port: "${PORT}"],
  url: [host: "${HOST}", port: "${PORT}"],
  secret_key_base: "${SECRET_KEY}",
  server: true,
  root: "."

# Do not print debug messages in production
config :logger, level: :info

# ## SSL Support
#
# To get SSL working, you will need to add the `https` key
# to the previous section and set your `:url` port to 443:
#
#     config :myapp, MyappWeb.Endpoint,
#       ...
#       url: [host: "example.com", port: 443],
#       https: [:inet6,
#               port: 443,
#               keyfile: System.get_env("SOME_APP_SSL_KEY_PATH"),
#               certfile: System.get_env("SOME_APP_SSL_CERT_PATH")]
#
# Where those two env variables return an absolute path to
# the key and cert in disk or a relative path inside priv,
# for example "priv/ssl/server.key".
#
# We also recommend setting `force_ssl`, ensuring no data is
# ever sent via http, always redirecting to https:
#
#     config :myapp, MyappWeb.Endpoint,
#       force_ssl: [hsts: true]
#
# Check `Plug.SSL` for all available options in `force_ssl`.

# ## Using releases
#
# If you are doing OTP releases, you need to instruct Phoenix
# to start the server for all endpoints:
#
#     config :phoenix, :serve_endpoints, true
#
# Alternatively, you can configure exactly which server to
# start per endpoint:
#
#     config :myapp, MyappWeb.Endpoint, server: true
#

# Configure your database
config :myapp, Myapp.Repo,
  adapter: Ecto.Adapters.Postgres,
  hostname: "${DB_HOSTNAME}",
  username: "${DB_USERNAME}",
  password: "${DB_PASSWORD}",
  database: "${DB_DATABASE}",
  port: "${DB_PORT}",
  pool_size: 20

# mix_docker configurations.
config :mix_docker,
  image: "ramondelemos/myapp",
  tag: "{mix-version}",
  dockerfile_release: "Dockerfile.release",
  dockerfile_build: "Dockerfile.build"

config :peerage,
  via: Peerage.Via.Dns,
  dns_name: "myapp-service-headless.default.svc.cluster.local",
  app_name: "myapp",
  interval: 5

# Configures Kubernetes POD IP
config :myapp,
  :app_pod_ip, "${K8S_POD_IP}"

# Configures Kubernetes POD IP
config :myapp,
  :k8s_dns_name, "${K8S_DNS_NAME}"

# Configures Application Cluster Name
config :myapp,
  :app_cluster_name, "${APP_CLUSTER_NAME}"
